// <auto-generated />
using System;
using Infrastructure.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(MainContext))]
    partial class MainContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreationTimestamp")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DeletedTimestamp")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedTimestamp")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("City");
                });

            modelBuilder.Entity("Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("Birthday")
                        .HasColumnType("date");

                    b.Property<string>("CreationTimestamp")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DeletedTimestamp")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("Hospital_DoctorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModifiedTimestamp")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("Specialisation_DoctorId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Hospital_DoctorId");

                    b.HasIndex("Specialisation_DoctorId");

                    b.ToTable("Doctor");
                });

            modelBuilder.Entity("Hospital", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreationTimestamp")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DeletedTimestamp")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("Hospital_DoctorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedTimestamp")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("Hospital_DoctorId");

                    b.ToTable("Hospital");
                });

            modelBuilder.Entity("Hospital_Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreationTimestamp")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DeletedTimestamp")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedTimestamp")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("Hospital_Doctor");
                });

            modelBuilder.Entity("Specialisation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreationTimestamp")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DeletedTimestamp")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedTimestamp")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("Specialisation_DoctorId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("Specialisation_DoctorId");

                    b.ToTable("Specialisation");
                });

            modelBuilder.Entity("Specialisation_Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreationTimestamp")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DeletedTimestamp")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("Experience")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedTimestamp")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Specialisation_Doctor");
                });

            modelBuilder.Entity("Doctor", b =>
                {
                    b.HasOne("Hospital_Doctor", null)
                        .WithMany("Doctor")
                        .HasForeignKey("Hospital_DoctorId");

                    b.HasOne("Specialisation_Doctor", null)
                        .WithMany("Doctor")
                        .HasForeignKey("Specialisation_DoctorId");
                });

            modelBuilder.Entity("Hospital", b =>
                {
                    b.HasOne("City", "City")
                        .WithMany("Hospitals")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Doctor", null)
                        .WithMany("Hospital")
                        .HasForeignKey("DoctorId");

                    b.HasOne("Hospital_Doctor", null)
                        .WithMany("Hospital")
                        .HasForeignKey("Hospital_DoctorId");

                    b.Navigation("City");
                });

            modelBuilder.Entity("Specialisation", b =>
                {
                    b.HasOne("Doctor", null)
                        .WithMany("Specialisation")
                        .HasForeignKey("DoctorId");

                    b.HasOne("Specialisation_Doctor", null)
                        .WithMany("Specialisation")
                        .HasForeignKey("Specialisation_DoctorId");
                });

            modelBuilder.Entity("City", b =>
                {
                    b.Navigation("Hospitals");
                });

            modelBuilder.Entity("Doctor", b =>
                {
                    b.Navigation("Hospital");

                    b.Navigation("Specialisation");
                });

            modelBuilder.Entity("Hospital_Doctor", b =>
                {
                    b.Navigation("Doctor");

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("Specialisation_Doctor", b =>
                {
                    b.Navigation("Doctor");

                    b.Navigation("Specialisation");
                });
#pragma warning restore 612, 618
        }
    }
}
